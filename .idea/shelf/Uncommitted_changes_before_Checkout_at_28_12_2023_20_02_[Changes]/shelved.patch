Index: test2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\n\r\n\r\nclass Board:\r\n    # создание поля\r\n    def __init__(self, width, height):\r\n        self.width = width\r\n        self.height = height\r\n        self.board = [[0] * width for _ in range(height)]\r\n        # значения по умолчанию\r\n        self.left = 10\r\n        self.top = 10\r\n        self.cell_size = 144\r\n\r\n    # настройка внешнего вида\r\n    def set_view(self, left, top, cell_size):\r\n        self.left = left\r\n        self.top = top\r\n        self.cell_size = cell_size\r\n\r\n    def render(self, name_screen):\r\n        for x in range(0, self.width):\r\n            for y in range(0, self.height):\r\n                pygame.draw.rect(name_screen, 'white', (x * self.cell_size, y * self.cell_size,\r\n                                                        self.cell_size, self.cell_size), 1)\r\n\r\n    def get_click(self, mouse_pos):\r\n        cell = self.get_cell(mouse_pos)\r\n        # self.on_click(cell)\r\n\r\n    def get_cell(self, mouse_pos):\r\n        x = (mouse_pos[0] - self.left) // self.cell_size\r\n        y = (mouse_pos[1] - self.top) // self.cell_size\r\n        if 0 <= x < self.width and 0 <= y < self.height:\r\n            print((x, y))\r\n        else:\r\n            print(None)\r\n\r\n\r\nif __name__ == '__main__':\r\n    pygame.init()\r\n    size = width, height = 800, 400\r\n    screen = pygame.display.set_mode(size)\r\n\r\n    running = True\r\n    board = Board(5, 7)\r\n    while running:\r\n        for event in pygame.event.get():\r\n            if event.type == pygame.QUIT:\r\n                running = False\r\n            if event.type == pygame.MOUSEBUTTONDOWN:\r\n                board.get_click(event.pos)\r\n        screen.fill((0, 0, 0))\r\n        board.render(screen)\r\n        pygame.display.flip()\r\n    pygame.quit()\r\n
===================================================================
diff --git a/test2.py b/test2.py
--- a/test2.py	
+++ b/test2.py	
@@ -1,56 +1,120 @@
+#import pygame
+#
+#MAP_SIZE = x, y = 25, 25
+#class Board:
+#    # создание поля
+#    def __init__(self, width, height):
+#        self.width = width
+#        self.height = height
+#        self.board = [[0] * width for _ in range(height)]
+#        # значения по умолчанию
+#        self.left = 10
+#        self.top = 10
+#        self.cell_size = 144
+#
+#    # настройка внешнего вида
+#    def set_view(self, left, top, cell_size):
+#        self.left = left
+#        self.top = top
+#        self.cell_size = cell_size
+#
+#    def render(self, name_screen):
+#        for x in range(0, self.width):
+#            for y in range(0, self.height):
+#                pygame.draw.rect(name_screen, 'white', (x * self.cell_size, y * self.cell_size,
+#                                                        self.cell_size, self.cell_size), 1)
+#
+#    def get_click(self, mouse_pos):
+#        cell = self.get_cell(mouse_pos)
+#        # self.on_click(cell)
+#
+#    def get_cell(self, mouse_pos):
+#        x = (mouse_pos[0] - self.left) // self.cell_size
+#        y = (mouse_pos[1] - self.top) // self.cell_size
+#        if 0 <= x < self.width and 0 <= y < self.height:
+#            print((x, y))
+#        else:
+#            print(None)
+#
+#
+#if __name__ == '__main__':
+#    pygame.init()
+#    size = width, height = 800, 400
+#    screen = pygame.display.set_mode(size)
+#
+#    running = True
+#    board = Board(5, 7)
+#    while running:
+#        for event in pygame.event.get():
+#            if event.type == pygame.QUIT:
+#                running = False
+#            if event.type == pygame.MOUSEBUTTONDOWN:
+#                board.get_click(event.pos)
+#        screen.fill((0, 0, 0))
+#        board.render(screen)
+#        pygame.display.flip()
+#    pygame.quit()
 import pygame
-
-
-class Board:
-    # создание поля
-    def __init__(self, width, height):
-        self.width = width
-        self.height = height
-        self.board = [[0] * width for _ in range(height)]
-        # значения по умолчанию
-        self.left = 10
-        self.top = 10
-        self.cell_size = 144
-
-    # настройка внешнего вида
-    def set_view(self, left, top, cell_size):
-        self.left = left
-        self.top = top
-        self.cell_size = cell_size
-
-    def render(self, name_screen):
-        for x in range(0, self.width):
-            for y in range(0, self.height):
-                pygame.draw.rect(name_screen, 'white', (x * self.cell_size, y * self.cell_size,
-                                                        self.cell_size, self.cell_size), 1)
+import random
 
-    def get_click(self, mouse_pos):
-        cell = self.get_cell(mouse_pos)
-        # self.on_click(cell)
 
-    def get_cell(self, mouse_pos):
-        x = (mouse_pos[0] - self.left) // self.cell_size
-        y = (mouse_pos[1] - self.top) // self.cell_size
-        if 0 <= x < self.width and 0 <= y < self.height:
-            print((x, y))
-        else:
-            print(None)
-
-
-if __name__ == '__main__':
-    pygame.init()
-    size = width, height = 800, 400
-    screen = pygame.display.set_mode(size)
+pygame.init()
+size = width, height = 600, 600
+screen = pygame.display.set_mode(size)
+all_sprites = pygame.sprite.Group()
+horizontal_borders = pygame.sprite.Group()
+vertical_borders = pygame.sprite.Group()
+
+class Ball(pygame.sprite.Sprite):
+    def __init__(self, radius, x, y):
+        super().__init__(all_sprites)
+        self.radius = radius
+        self.image = pygame.Surface((2 * radius, 2 * radius),
+                                    pygame.SRCALPHA, 32)
+        pygame.draw.circle(self.image, pygame.Color("red"),
+                           (radius, radius), radius)
+        self.rect = pygame.Rect(x, y, 2 * radius, 2 * radius)
+        self.vx = random.randint(-5, 5)
+        self.vy = random.randrange(-5, 5)
+
+    def update(self):
+        self.rect = self.rect.move(self.vx, self.vy)
+        if pygame.sprite.spritecollideany(self, horizontal_borders):
+            self.vy = -self.vy
+        if pygame.sprite.spritecollideany(self, vertical_borders):
+            self.vx = -self.vx
+
+class Border(pygame.sprite.Sprite):
+    # строго вертикальный или строго горизонтальный отрезок
+    def __init__(self, x1, y1, x2, y2):
+        super().__init__(all_sprites)
+        if x1 == x2:  # вертикальная стенка
+            self.add(vertical_borders)
+            self.image = pygame.Surface([1, y2 - y1])
+            self.rect = pygame.Rect(x1, y1, 1, y2 - y1)
+        else:  # горизонтальная стенка
+            self.add(horizontal_borders)
+            self.image = pygame.Surface([x2 - x1, 1])
+            self.rect = pygame.Rect(x1, y1, x2 - x1, 1)
+
+Border(5, 5, width - 5, 5)
+Border(5, height - 5, width - 5, height - 5)
+Border(5, 5, 5, height - 5)
+Border(width - 5, 5, width - 5, height - 5)
+
+for i in range(10):
+    Ball(20, 100, 100)
 
-    running = True
-    board = Board(5, 7)
-    while running:
-        for event in pygame.event.get():
-            if event.type == pygame.QUIT:
-                running = False
-            if event.type == pygame.MOUSEBUTTONDOWN:
-                board.get_click(event.pos)
-        screen.fill((0, 0, 0))
-        board.render(screen)
-        pygame.display.flip()
-    pygame.quit()
+running = True
+clock = pygame.time.Clock()
+fps = 60
+while running:
+    screen.fill((255, 255, 255))
+    for event in pygame.event.get():
+        if event.type == pygame.QUIT:
+            running = False
+    all_sprites.draw(screen)
+    all_sprites.update()
+    clock.tick(fps)
+    pygame.display.flip()
+pygame.quit()
\ No newline at end of file
Index: map_1.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\nimport sys\r\nimport os\r\n\r\ndef load_image(name, colorkey=None):\r\n    '''\r\n    Функция для загрузки изображений\r\n    '''\r\n    fullname = os.path.join('data', name)\r\n    if not os.path.isfile(fullname):\r\n        print(f\"Файл с изображением '{fullname}' не найден\")\r\n        sys.exit()\r\n    image = pygame.image.load(fullname)\r\n    if colorkey is not None:\r\n        image = image.convert()\r\n        if colorkey == -1:\r\n            colorkey = image.get_at((0, 0))\r\n        image.set_colorkey(colorkey)\r\n    else:\r\n        image = image.convert_alpha()\r\n    return image\r\n\r\n\r\nclass Map_1:\r\n    def __init__(self, screen):\r\n        self.screen = screen\r\n        self.barrier = pygame.transform.scale(load_image(\"barrier.png\"), (80, 80))\r\n        self.box= pygame.transform.scale(load_image(\"box.png\"), (80, 80))\r\n\r\n    def render(self):\r\n        pass\r\n\r\n    def create_board(self):\r\n        self.width = 10\r\n        self.height = 10\r\n        self.board = [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3],\r\n                      [3, 1, 1, 1, 1, 1, 1, 1, 2, 3],\r\n                      [3, 1, 1, 2, 1, 1, 1, 2, 1, 3],\r\n                      [3, 1, 1, 2, 1, 1, 1, 1, 1, 3],\r\n                      [3, 1, 1, 2, 1, 1, 1, 1, 1, 3],\r\n                      [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],\r\n                      [3, 1, 1, 2, 1, 1, 1, 2, 1, 3],\r\n                      [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],\r\n                      [3, 2, 1, 1, 1, 1, 1, 1, 1, 3],\r\n                      [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]\r\n        # значения по умолчанию\r\n        self.left = 10\r\n        self.top = 10\r\n        self.cell_size = 80\r\n        for x in range(0, self.width):\r\n            for y in range(0, self.height):\r\n                if self.board[x][y] == 3:\r\n                    self.screen.blit(self.barrier, (x * self.cell_size, y * self.cell_size))\r\n                if self.board[x][y] == 2:\r\n                    self.screen.blit(self.box, (x * self.cell_size, y * self.cell_size))\r\n                if self.board[x][y] == 1:\r\n                    pygame.draw.rect(self.screen, 'gray', (x * self.cell_size, y * self.cell_size,\r\n                                                            self.cell_size, self.cell_size), 0)\r\n\r\n                pygame.draw.rect(self.screen, 'white', (x * self.cell_size, y * self.cell_size,\r\n                                                        self.cell_size, self.cell_size), 1)\r\n\r\n    def get_click(self, mouse_pos):\r\n        cell = self.get_cell(mouse_pos)\r\n        # self.on_click(cell)\r\n\r\n    def get_cell(self, mouse_pos):\r\n        x = (mouse_pos[0] - self.left) // self.cell_size\r\n        y = (mouse_pos[1] - self.top) // self.cell_size\r\n        if 0 <= x < self.width and 0 <= y < self.height:\r\n            print((x, y))\r\n        else:\r\n            print(None)\r\n\r\n    def getboard(self):\r\n        return self.board\r\n
===================================================================
diff --git a/map_1.py b/map_1.py
--- a/map_1.py	
+++ b/map_1.py	
@@ -24,8 +24,9 @@
 class Map_1:
     def __init__(self, screen):
         self.screen = screen
-        self.barrier = pygame.transform.scale(load_image("barrier.png"), (80, 80))
+        self.barrier = pygame.transform.scale(load_image("brick_barrier.png"), (80, 80))
         self.box= pygame.transform.scale(load_image("box.png"), (80, 80))
+        self.floor = pygame.transform.scale(load_image("sandfloor.png"), (80, 80))
 
     def render(self):
         pass
@@ -33,32 +34,33 @@
     def create_board(self):
         self.width = 10
         self.height = 10
-        self.board = [[3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
-                      [3, 1, 1, 1, 1, 1, 1, 1, 2, 3],
-                      [3, 1, 1, 2, 1, 1, 1, 2, 1, 3],
-                      [3, 1, 1, 2, 1, 1, 1, 1, 1, 3],
-                      [3, 1, 1, 2, 1, 1, 1, 1, 1, 3],
-                      [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
-                      [3, 1, 1, 2, 1, 1, 1, 2, 1, 3],
-                      [3, 1, 1, 1, 1, 1, 1, 1, 1, 3],
-                      [3, 2, 1, 1, 1, 1, 1, 1, 1, 3],
-                      [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]]
-        # значения по умолчанию
+        self.board = ['##########',
+                      '#.....XX.#',
+                      '#........#',
+                      '#...X.X..#',
+                      '#........#',
+                      '#..X...X.#',
+                      '#...X....#',
+                      '#...X....#',
+                      '#...X....#',
+                      '##########']
+        # значения по умлчанию
         self.left = 10
         self.top = 10
-        self.cell_size = 80
+        self.cell_size = 100
         for x in range(0, self.width):
             for y in range(0, self.height):
-                if self.board[x][y] == 3:
+                if self.board[y][x] == '#':
                     self.screen.blit(self.barrier, (x * self.cell_size, y * self.cell_size))
-                if self.board[x][y] == 2:
+                if self.board[y][x] == 'X':
                     self.screen.blit(self.box, (x * self.cell_size, y * self.cell_size))
-                if self.board[x][y] == 1:
-                    pygame.draw.rect(self.screen, 'gray', (x * self.cell_size, y * self.cell_size,
-                                                            self.cell_size, self.cell_size), 0)
+                if self.board[y][x] == '.':
+                    self.screen.blit(self.floor, (x * self.cell_size, y * self.cell_size))
+                    #pygame.draw.rect(self.screen, '#e09602', (x * self.cell_size, y * self.cell_size,
+                                                           # self.cell_size, self.cell_size), 0)
 
-                pygame.draw.rect(self.screen, 'white', (x * self.cell_size, y * self.cell_size,
-                                                        self.cell_size, self.cell_size), 1)
+                #.draw.rect(self.screen, 'white', (x * self.cell_size, y * self.cell_size,
+                                                        #self.cell_size, self.cell_size), 1)
 
     def get_click(self, mouse_pos):
         cell = self.get_cell(mouse_pos)
